(defpackage :pp-runner-comm-largest-inner
  (:use :cl)
  (:export :main))
(in-package :pp-runner-comm-largest-inner)

(load "gc.lisp")
(load "args.lisp")

(defun %do-iters (min max iters)
  (declare (type fixnum min max iters))
  (loop repeat iters do (pp-comm:largest-inner min max))
  (multiple-value-bind (p _vec) (pp-comm:largest-inner min max)
    (declare (ignore _vec))
    p))

(defun server-loop ()
  (pp-gc:prepare-gc-for-bench)
  (let ((min nil) (max nil))
    (loop for line = (read-line *standard-input* nil nil)
          while line do
            (let* ((parts (uiop:split-string line :separator " "))
                   (cmd   (string-upcase (first parts))))
              (cond
                ((string= cmd "INIT")
                 (setf min (parse-integer (second parts))
                       max (parse-integer (third parts)))
                 (format t "OK~%") (finish-output))
                ((string= cmd "WARMUP")
                 (let ((iters (parse-integer (second parts))))
                   (when (and min max) (%do-iters min max iters))
                   (format t "OK~%") (finish-output)))
                ((string= cmd "RUN")
                 (let ((iters (parse-integer (second parts))))
                   (if (and min max)
                       (format t "OK ~D~%" (%do-iters min max iters))
                       (format t "ERR NOTINIT~%"))
                   (finish-output)))
                ((string= cmd "QUIT") (return))
                (t (format t "ERR BADCMD~%") (finish-output)))))))

(defun main ()
  (let* ((argv #+sbcl sb-ext:*posix-argv*))
    (if (and argv (find "--server" argv :test #'string=))
        (server-loop)
        (multiple-value-bind (min max iters) (pp-args:parse-min-max-iters)
          (pp-gc:prepare-gc-for-bench)
          (format t "~D~%" (%do-iters min max iters))))))
